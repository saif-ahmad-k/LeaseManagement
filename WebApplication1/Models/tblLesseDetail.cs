//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.Models
{
    using Microsoft.Ajax.Utilities;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;

    public partial class tblLesseDetail
    {
        public int ID { get; set; }
        public string Lesse { get; set; }
        public Nullable<System.DateTime> LesseDate { get; set; }
        public Nullable<System.DateTime> FundDate { get; set; }
        public Nullable<System.DateTime> FirstPaymentDate { get; set; }
        public Nullable<System.DateTime> FirstPaymentToBankDate { get; set; }
        public Nullable<System.DateTime> LesseMaturityDate { get; set; }
        public string Description { get; set; }
        public string LeaseID { get; set; }
        public string DealOrigin { get; set; }
        public string LeaseType { get; set; }
        public string TotalLeaase { get; set; }
        public string MonthlyPayment { get; set; }
        public string Term { get; set; }
        public string Lender { get; set; }
        public string LeaseFee { get; set; }
        public string VIN { get; set; }
        public string Residual { get; set; }
        public string EstimatedPropertyTax { get; set; }
        public string MMA { get; set; }
        public string AccountRep1 { get; set; }
        public string AccountRep2 { get; set; }
        public string AccountRep3 { get; set; }
        public string InsuranceProvider { get; set; }
        public Nullable<System.DateTime> InsuranceExpiry { get; set; }
        public string VendorCost { get; set; }
        public string LeaseDocumentForm { get; set; }
        public string TitleHolder { get; set; }
        public Nullable<bool> IsSaleTaxExept { get; set; }
        public Nullable<System.DateTime> LeaseTerminationDate { get; set; }
        public string TitleStatus { get; set; }
        public string UCCStatus { get; set; }
        public Nullable<System.DateTime> UCCDate { get; set; }
        public string PropertyTaxStatus { get; set; }
        public string CollateralStreet { get; set; }
        public string CollateralCity { get; set; }
        public string CollateralState { get; set; }
        public string CollateralZipCode { get; set; }
        public string CollateralCountry { get; set; }
        public string MailingStreet { get; set; }
        public string MailingCity { get; set; }
        public string MailingState { get; set; }
        public string MailingZipCode { get; set; }
        public string Comments1 { get; set; }
        public string Comments2 { get; set; }
        public string LeaseYear { get; set; }
        public string LeaseMonthAndYear { get; set; }
        public string FundedMonthAndYear { get; set; }
        public string LeaseCount { get; set; }
        public string BANKCHK_LESSEEBANK_TAB { get; set; }
        public string BANKCHK_BANKYEAR_TAB { get; set; }
        public string BANKCHK_BANKMONTH_TAB { get; set; }
        public string LESSEECHK_LESSEEBANK_TAB { get; set; }
        public string LESSEECHK_LESSEEYEAR_TAB { get; set; }
        public string LESSEECHK_LESSEEMONTH_TAB { get; set; }
        public Nullable<int> CustomerID { get; set; }
        public Nullable<int> LenderID { get; set; }
        public Nullable<decimal> LeaseRate { get; set; }
        public string LicensePlate { get; set; }
    
        public virtual tblCustomer tblCustomer { get; set; }
        public virtual tblLender tblLender { get; set; }
        [NotMapped]
        public string TotalLeaseString
        {
            get
            {
                if (!string.IsNullOrEmpty(TotalLeaase))
                {
                    decimal TotalLeaase1 = 0;
                    if (decimal.TryParse(TotalLeaase, out TotalLeaase1))
                    {
                        return string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", TotalLeaase1);
                    }
                    else
                    {
                        return TotalLeaase;
                    }
                }
                else
                {
                    return null;
                }
            }
        }
        [NotMapped]
        public string MonthlyPaymentString
        {
            get
            {
                if (!string.IsNullOrEmpty(MonthlyPayment))
                {
                    decimal TotalLeaase1 = 0;
                    if (decimal.TryParse(MonthlyPayment, out TotalLeaase1))
                    {
                        return string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", TotalLeaase1);
                    }
                    else
                    {
                        return MonthlyPayment;
                    }
                }
                else
                {
                    return null;
                }
            }
        }
        [NotMapped]
        public string LeaseFeeString
        {
            get
            {
                if (!string.IsNullOrEmpty(LeaseFee))
                {
                    decimal TotalLeaase1 = 0;
                    if (decimal.TryParse(LeaseFee, out TotalLeaase1))
                    {
                        return string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", TotalLeaase1);
                    }
                    else
                    {
                        return LeaseFee;
                    }
                }
                else
                {
                    return null;
                }
            }
        }
        [NotMapped]
        public string EstimatedPropertyTaxString
        {
            get
            {
                if (!string.IsNullOrEmpty(EstimatedPropertyTax))
                {
                    decimal TotalLeaase1 = 0;
                    if (decimal.TryParse(EstimatedPropertyTax, out TotalLeaase1))
                    {
                        return string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", TotalLeaase1);
                    }
                    else
                    {
                        return EstimatedPropertyTax;
                    }
                }
                else
                {
                    return null;
                }
            }
        }
        [NotMapped]
        public string VendorCostString
        {
            get
            {
                if (!string.IsNullOrEmpty(VendorCost))
                {
                    decimal TotalLeaase1 = 0;
                    if (decimal.TryParse(VendorCost, out TotalLeaase1))
                    {
                        return string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", TotalLeaase1);
                    }
                    else
                    {
                        return VendorCost;
                    }
                }
                else
                {
                    return null;
                }
            }
        }
        [NotMapped]
        public string LeaseRateString
        {
            get
            {
                    if (LeaseFee != null)
                    {
                        return string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", LeaseRate);
                    }
                    else
                    {
                        return LeaseFee;
                    }
            }
        }
        public string ResidualString
        {
            get
            {
                if (!string.IsNullOrEmpty(Residual))
                {
                    decimal TotalLeaase1 = 0;
                    if (decimal.TryParse(Residual, out TotalLeaase1))
                    {
                        return string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", TotalLeaase1);
                    }
                    else
                    {
                        return Residual;
                    }
                }
                else
                {
                    return null;
                }
            }
        }
    }
}
